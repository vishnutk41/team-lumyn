import Head from "next/head";
import Footer from "@/component/footer";
import NavMenuBar from "@/component/menu";
import { useState } from "react";

const countryCodes = [
  { code: "+971", country: "UAE" },
  { code: "+91", country: "India" },
  { code: "+1", country: "USA" },
  { code: "+44", country: "UK" }
];

type FormErrors = {
  fullName?: string;
  email?: string;
  phoneNumber?: string;
  additionalMessage?: string;
};

export default function ContactUs() {
  const [showCodes, setShowCodes] = useState(false);
  const [selectedCode, setSelectedCode] = useState(countryCodes[0]);
  
  // Form state
  const [fullName, setFullName] = useState("");
  const [email, setEmail] = useState("");
  const [phoneNumber, setPhoneNumber] = useState("");
  const [additionalMessage, setAdditionalMessage] = useState("");
  
  // Validation state
  const [errors, setErrors] = useState<FormErrors>({});

  const validateForm = () => {
    const newErrors: FormErrors = {};

    // Full Name validation
    if (!fullName.trim()) {
      newErrors.fullName = "Full Name is required";
    }

    // Email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!email.trim()) {
      newErrors.email = "Email address is required";
    } else if (!emailRegex.test(email)) {
      newErrors.email = "Invalid email format";
    }

    // Phone Number validation
    const phoneRegex = /^[0-9]{9,15}$/;
    if (!phoneNumber.trim()) {
      newErrors.phoneNumber = "Mobile number is required";
    } else if (!phoneRegex.test(phoneNumber)) {
      newErrors.phoneNumber = "Invalid phone number";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (validateForm()) {
      console.log("Form submitted", {
        fullName,
        email,
        phone: `${selectedCode.code}${phoneNumber}`,
        additionalMessage
      });
      // Reset form or show success message
    }
  };

  return (
    <>
      <Head>
        <title>Lumyn | Contact Us</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="page">
        <main className="main contact_us">
          <NavMenuBar />
          <div className="content_section">
            <div className="map">
              <iframe
                src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3654.8052650119494!2d55.345186299999995!3d25.2763596!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3e5f5ced3e109b31%3A0xb36bed5b11fa809b!2sNew%20Al%20safiyah%20Building!5e1!3m2!1sen!2sin!4v1736825725608!5m2!1sen!2sin"
                width="100%"
                height="100%"
                style={{ border: 0 }}
                allowFullScreen
                loading="lazy"
                referrerPolicy="no-referrer-when-downgrade"
              ></iframe>
            </div>
            <div className="contact_form">
              <h3 className="title">Get in Touch with Our Experts.</h3>
              <p className="sub_title">
                Tailoring each moment to your furry companion's individual needs.
              </p>
              <form onSubmit={handleSubmit} className="container">
                <div className="wrapper">
                  <div className="part_one">
                    <input 
                      placeholder="Full Name" 
                      value={fullName}
                      onChange={(e) => setFullName(e.target.value)}
                    />
                    {errors.fullName && <div style={{color: 'red', fontSize: '0.8rem'}}>{errors.fullName}</div>}
                    
                    <input 
                      placeholder="Email address" 
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                    />
                    {errors.email && <div style={{color: 'red', fontSize: '0.8rem'}}>{errors.email}</div>}
                    
                    <div className="phone_input">
                      <div className="country_code" onClick={() => setShowCodes(!showCodes)}>
                        {selectedCode.code}
                        {showCodes && (
                          <div className="dropdown">
                            {countryCodes.map((item) => (
                              <div
                                key={item.code}
                                className="option"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  setSelectedCode(item);
                                  setShowCodes(false);
                                }}
                              >
                                {item.country} ({item.code})
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                      <input 
                        placeholder="Mobile number" 
                        value={phoneNumber}
                        onChange={(e) => setPhoneNumber(e.target.value)}
                      />
                    </div>
                    {errors.phoneNumber && <div style={{color: 'red', fontSize: '0.8rem'}}>{errors.phoneNumber}</div>}
                  </div>
                  <div className="part_two">
                    <textarea 
                      placeholder="Additional Message" 
                      value={additionalMessage}
                      onChange={(e) => setAdditionalMessage(e.target.value)}
                    />
                  </div>
                </div>
                <button type="submit" className="primay_button">Submit</button>
              </form>
            </div>
          </div>
        </main>
        <Footer />
      </div>
    </>
  );
}
